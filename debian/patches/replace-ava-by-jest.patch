Description: replace ava by jest
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2020-11-26

--- /dev/null
+++ b/human-signals/.babelrc
@@ -0,0 +1,3 @@
+{
+  "presets": ["@babel/preset-env"]
+}
--- a/human-signals/test/main.js
+++ b/human-signals/test/main.js
@@ -1,6 +1,5 @@
 import { isDeepStrictEqual } from 'util'
 
-import test from 'ava'
 import { each } from 'test-each'
 import Ajv from 'ajv'
 
@@ -48,28 +47,24 @@
     { title: 'signalsByNumber', signals: signalsByNumber },
   ],
   ({ title }, { signals }) => {
-    test(`Shape | ${title}`, t => {
-      t.is(validate(signals, JSON_SCHEMA), undefined)
+    test(`Shape | ${title}`, () => {
+      expect(validate(signals, JSON_SCHEMA)).toBe(undefined)
     })
   },
 )
 
-test('Object keys | signalsByName', t => {
-  t.true(Object.entries(signalsByName).every(([key, { name }]) => key === name))
+test('Object keys | signalsByName', () => {
+  expect(Object.entries(signalsByName).every(([key, { name }]) => key === name)).toBe(true)
 })
 
-test('Object keys | signalsByNumber', t => {
-  t.true(
-    Object.entries(signalsByNumber).every(
-      ([key, { number }]) => key === String(number),
-    ),
-  )
+test('Object keys | signalsByNumber', () => {
+  expect(Object.entries(signalsByNumber).every(
+    ([key, { number }]) => key === String(number),
+  )).toBe(true)
 })
 
-test('Same signals', t => {
-  t.true(
-    Object.values(signalsByNumber).every(signal =>
-      isDeepStrictEqual(signal, signalsByName[signal.name]),
-    ),
-  )
+test('Same signals', () => {
+  expect(Object.values(signalsByNumber).every(signal =>
+    isDeepStrictEqual(signal, signalsByName[signal.name]),
+  )).toBe(true)
 })
--- /dev/null
+++ b/onetime/.babelrc
@@ -0,0 +1,3 @@
+{
+  "presets": ["@babel/preset-env"]
+}
--- a/onetime/test.js
+++ b/onetime/test.js
@@ -1,33 +1,32 @@
-import test from 'ava';
 import onetime from '.';
 
-test('call function once', t => {
+test('call function once', () => {
 	let i = 0;
 	const fixture = onetime(() => ++i);
-	t.is(fixture(), 1);
-	t.is(fixture(), 1);
-	t.is(fixture(), 1);
+	expect(fixture()).toBe(1);
+	expect(fixture()).toBe(1);
+	expect(fixture()).toBe(1);
 });
 
-test('option to throw is called more than once', t => {
+test('option to throw is called more than once', () => {
 	const fixture = onetime(() => {}, {throw: true});
 	fixture();
-	t.throws(fixture, /Function .* can only be called once/);
+	expect(fixture).toThrowError(/Function .* can only be called once/);
 });
 
-test('`callCount` method', t => {
+test('`callCount` method', () => {
 	const fixture = onetime(() => {});
-	t.is(onetime.callCount(fixture), 0);
+	expect(onetime.callCount(fixture)).toBe(0);
 	fixture();
 	fixture();
 	fixture();
-	t.is(onetime.callCount(fixture), 3);
+	expect(onetime.callCount(fixture)).toBe(3);
 });
 
-test('`callCount` method - throw on non-onetime-wrapped functions', t => {
+test('`callCount` method - throw on non-onetime-wrapped functions', () => {
 	const fixture = () => {};
 
-	t.throws(() => {
+	expect(() => {
 		onetime.callCount(fixture);
-	}, /not wrapped/);
+	}).toThrowError(/not wrapped/);
 });
--- /dev/null
+++ b/path-key/.babelrc
@@ -0,0 +1,3 @@
+{
+  "presets": ["@babel/preset-env"]
+}
--- a/path-key/test.js
+++ b/path-key/test.js
@@ -1,12 +1,11 @@
-import test from 'ava';
 import pathKey from '.';
 
-test('main', t => {
-	t.is(pathKey().toUpperCase(), 'PATH');
-	t.is(pathKey({env: {PATH: ''}}), 'PATH');
-	t.is(pathKey({env: {Path: ''}, platform: 'win32'}), 'Path');
-	t.is(pathKey({env: {}, platform: 'darwin'}), 'PATH');
-	t.is(pathKey({env: {}, platform: 'win32'}), 'Path');
-	t.is(pathKey({env: {Path: '', PATH: ''}, platform: 'win32'}), 'PATH');
-	t.is(pathKey({env: {PATH: '', Path: ''}, platform: 'win32'}), 'Path');
+test('main', () => {
+	expect(pathKey().toUpperCase()).toBe('PATH');
+	expect(pathKey({env: {PATH: ''}})).toBe('PATH');
+	expect(pathKey({env: {Path: ''}, platform: 'win32'})).toBe('Path');
+	expect(pathKey({env: {}, platform: 'darwin'})).toBe('PATH');
+	expect(pathKey({env: {}, platform: 'win32'})).toBe('Path');
+	expect(pathKey({env: {Path: '', PATH: ''}, platform: 'win32'})).toBe('PATH');
+	expect(pathKey({env: {PATH: '', Path: ''}, platform: 'win32'})).toBe('Path');
 });
